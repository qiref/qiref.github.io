<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on 大道至简</title>
    <link>http://localhost:1313/tags/go/</link>
    <description>Recent content in Go on 大道至简</description>
    <generator>Hugo</generator>
    <language>cn-zh</language>
    <lastBuildDate>Wed, 15 May 2024 15:53:46 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>关于锁的思考和总结(一)</title>
      <link>http://localhost:1313/post/2024/05/15/%E5%85%B3%E4%BA%8E%E9%94%81%E7%9A%84%E6%80%9D%E8%80%83%E5%92%8C%E6%80%BB%E7%BB%93%E4%B8%80/</link>
      <pubDate>Wed, 15 May 2024 15:53:46 +0800</pubDate>
      <guid>http://localhost:1313/post/2024/05/15/%E5%85%B3%E4%BA%8E%E9%94%81%E7%9A%84%E6%80%9D%E8%80%83%E5%92%8C%E6%80%BB%E7%BB%93%E4%B8%80/</guid>
      <description>func add (a *int) *int { *a++ // 线程不安全 return a } 这是一段很典型的线程不安全的代码示例, 在并发场景下, a 的结果是不确定的, 大概率会小于 1000, 原因是 a++ 并非原子操作, 会存在同时有两个协程读取到 a 的值是相同的情况, 执行 a++之后再重新回写时, a的值也是相同的, 想要变为线程安全, 就需要在操作临界资源之前加锁;&#xA;Mutex 在操作共享资源之前加锁, 然后操作完临界资源之后释放锁, 保证同时只有一个协程操作临界资源;&#xA;var mu sync.Mutex func addSafe(a *int) *int { mu.Lock() // 加锁 defer mu.Unlock() // 释放锁 *a++ return a } 锁在多线程或多进程环境中实现资源的互斥访问。当一个线程或进程想要访问某个共享资源（如数据结构、文件等）时，它必须首先尝试获取该资源对应的锁。如果锁未被其他线程或进程占用，那么请求的线程或进程将获得锁并继续执行；否则，它将等待，直到锁被释放。&#xA;// If the lock is already in use, the calling goroutine // blocks until the mutex is available.</description>
    </item>
    <item>
      <title>Go ppfof工具使用</title>
      <link>http://localhost:1313/post/2024/02/23/go-ppfof%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 23 Feb 2024 15:53:46 +0800</pubDate>
      <guid>http://localhost:1313/post/2024/02/23/go-ppfof%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</guid>
      <description>pprof pprof 是用于可视化和分析性能分析数据的工具;&#xA;runtime/pprof：采集程序（非 Server）的运行数据进行分析 net/http/pprof：采集 HTTP Server 的运行时数据进行分析 启用方式 在main函数之前使用启动, DoProfile(6060)&#xA;import ( &amp;quot;net/http&amp;quot; _ &amp;quot;net/http/pprof&amp;quot; &amp;quot;strconv&amp;quot; ) type ProfileServer struct { } func (this *ProfileServer) DoProfile(port int) { go func() { err := http.ListenAndServe(&amp;quot;:&amp;quot;+strconv.FormatInt(int64(port), 10), nil) if err != nil { log.Errorf(&amp;quot;Failed to do profile on port: %d&amp;quot;, port) } else { log.Infof(&amp;quot;pprof start successfully on port %d&amp;quot;, port) } }() } 分析 curl &#39;http://127.0.0.1:6060/debug/pprof/profile&#39; -o profile.20240223 curl &#39;http://127.</description>
    </item>
    <item>
      <title>Go语言生产者消费者模型</title>
      <link>http://localhost:1313/post/2023/04/28/go%E8%AF%AD%E8%A8%80%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Fri, 28 Apr 2023 15:57:51 +0800</pubDate>
      <guid>http://localhost:1313/post/2023/04/28/go%E8%AF%AD%E8%A8%80%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/</guid>
      <description>type Request struct { Name string } type XxHandler struct { RequestQueue chan *Request } func (o *XxHandler) String() string { if b, err := json.Marshal(o); err != nil { return &amp;quot;&amp;quot; } else { return string(b) } } // Start 启动队列监听 func (o *XxHandler) Start() { go func() { for request := range o.RequestQueue { go o.Process(request) } }() } // AppendTask 向队列中增加task func (o *XxHandler) AppendTask(request *Request) { if request == nil { return } o.</description>
    </item>
    <item>
      <title>Go语言实现 bitmap</title>
      <link>http://localhost:1313/post/2023/04/28/go%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0-bitmap/</link>
      <pubDate>Fri, 28 Apr 2023 11:24:38 +0800</pubDate>
      <guid>http://localhost:1313/post/2023/04/28/go%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0-bitmap/</guid>
      <description>算法说明 Bitmap算法是一种基于位运算的数据结构，用于解决大规模数据的快速查找和统计问题。其基本原理是将一个大数据集合映射到一个二进制向量中，其中每个元素对应于数据集合中的一个元素，向量中的每一位表示该元素是否存在于集合中。&#xA;具体来说，Bitmap算法通过使用一个位图（bitmap）来表示一个数据集合，其中每个元素对应一个位。如果某个元素在数据集合中出现，则将其对应的位设置为1，否则将其对应的位设置为0。通过这种方式，可以快速地进行集合操作，如并集、交集和差集等。&#xA;Bitmap算法的主要优点在于其空间效率高，可以用较小的空间存储大规模数据集合。另外，Bitmap算法的时间复杂度也非常低，可以快速地进行集合操作。&#xA;如何用数组表示一个 bitmap 以 1byte 为例：8位能表示8个元素， 0-7 号对应了 b[0] 下标， 8-15 号对应了 b[1] 下标，以此类推。&#xA;因此，数组下标 n 跟bitmap元素序号 bitmapIdx 的关系为：n = bitmapIdx &amp;gt;&amp;gt; 3&#xA;值如何映射到 bitmap 数组 当找到了 元素序号 n 在数组中的下标之后，如何给 b[n] 赋值呢？&#xA;1 &amp;lt;&amp;lt; (bitmapIdx &amp;amp; 7) 等同于 1 &amp;lt;&amp;lt; (bitmapIdx % 8)&#xA;(bitmapIdx % 8) 找到在了在数组 b[n] 中的第 m 位，然后 1 &amp;lt;&amp;lt; m 之后，就相当于给数组赋值，把第 m 位 置为1。&#xA;验证 同样以 1byte 为例：借用上述结论，第 24 号元素，对应的数组下标 n 为：n = 24 &amp;gt;&amp;gt; 3 结果为3, b[3]；</description>
    </item>
    <item>
      <title>Go语言实现 LRU</title>
      <link>http://localhost:1313/post/2023/04/27/go%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0-lru/</link>
      <pubDate>Thu, 27 Apr 2023 21:43:12 +0800</pubDate>
      <guid>http://localhost:1313/post/2023/04/27/go%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0-lru/</guid>
      <description>LRU（Least Recently Used）算法，即最近最少使用算法;其基本思想是，如果一个数据最近被访问过，那么它在未来被访问的概率也会很高；反之，如果一个数据很久都没有被访问过，那么它在未来被访问的概率就相对较低。因此，LRU算法选择淘汰最近最少使用的数据，即选择最长时间没有被访问过的数据进行淘汰。&#xA;具体来说，LRU算法通常使用一个双向链表和一个哈希表来实现。双向链表中的节点按照最近访问时间的顺序排列，最近访问的节点排在链表头部，最久未访问的节点排在链表尾部。哈希表中存储每个节点的地址，以便快速查找和删除。&#xA;当需要访问一个数据时，LRU算法首先在哈希表中查找该数据，如果存在，则将对应的节点移动到链表头部；如果不存在，则将该数据添加到链表头部，并在哈希表中创建对应的节点。&#xA;当需要淘汰数据时，LRU算法选择链表尾部的节点进行淘汰，并在哈希表中删除对应的节点。&#xA;golang 实现 LRU 算法：&#xA;package lru import ( &amp;quot;container/list&amp;quot; &amp;quot;errors&amp;quot; &amp;quot;sync&amp;quot; ) // LRU implements a non-thread safe fixed size LRU cache type LRU struct { size int evictList *list.List items map[interface{}]*list.Element } // entry is used to hold a value in the evictList type entry struct { key interface{} value interface{} } // NewLRU constructs an LRU of the given size func NewLRU(size int) (*LRU, error) { if size &amp;lt;= 0 { return nil, errors.</description>
    </item>
    <item>
      <title>Go语言单例模式</title>
      <link>http://localhost:1313/post/2023/03/24/go%E8%AF%AD%E8%A8%80%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 24 Mar 2023 10:47:42 +0800</pubDate>
      <guid>http://localhost:1313/post/2023/03/24/go%E8%AF%AD%E8%A8%80%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>错误示例 type singleton struct {} var instance *singleton func GetInstance() *singleton { if instance == nil { instance = &amp;amp;singleton{} // 不是并发安全的 } return instance } 不优雅示例 func GetInstance() *singleton { mu.Lock() // 如果实例存在没有必要加锁 defer mu.Unlock() if instance == nil { instance = &amp;amp;singleton{} } return instance } 加锁可以保证每次拿到相同实例，但是如果已经实例化，再调用函数，依然有锁存在，浪费性能，不够优雅；&#xA;优雅示例 import ( &amp;quot;sync&amp;quot; ) type singleton struct {} var instance *singleton var once sync.Once func GetInstance() *singleton { once.Do(func() { instance = &amp;amp;singleton{} }) return instance } 该实现利用sync.</description>
    </item>
    <item>
      <title>Go语言cobra</title>
      <link>http://localhost:1313/post/2022/02/19/go%E8%AF%AD%E8%A8%80cobra/</link>
      <pubDate>Sat, 19 Feb 2022 18:16:23 +0000</pubDate>
      <guid>http://localhost:1313/post/2022/02/19/go%E8%AF%AD%E8%A8%80cobra/</guid>
      <description>摘要：Go语言 cobra 框架使用说明，文中代码地址： https://github.com/ArchieYao/clid&#xA;cobra 简介 cobra是 Go 语言的一个命令行程序库，可以用来编写命令行程序。同时，它也提供了一个脚手架， 用于生成基于 cobra 的应用程序框架。非常多知名的开源项目使用了 cobra 库构建命令行，如Kubernetes、Hugo、etcd等。&#xA;安装 cobra cobra 是由大名鼎鼎的 spf13（golang 开发者） 开发的，GitHub 地址：https://github.com/spf13/cobra&#xA;// 安装 go get -u github.com/spf13/cobra # 检查是否安装成功 cobra -h Cobra is a CLI library for Go that empowers applications. This application is a tool to generate the needed files to quickly create a Cobra application. Usage: cobra [command] Available Commands: add Add a command to a Cobra Application completion Generate the autocompletion script for the specified shell help Help about any command init Initialize a Cobra Application Flags: -a, --author string author name for copyright attribution (default &amp;quot;YOUR NAME&amp;quot;) --config string config file (default is $HOME/.</description>
    </item>
    <item>
      <title>Go语言实现httpServer</title>
      <link>http://localhost:1313/post/2021/06/19/go%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0httpserver/</link>
      <pubDate>Sat, 19 Jun 2021 10:18:23 +0000</pubDate>
      <guid>http://localhost:1313/post/2021/06/19/go%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0httpserver/</guid>
      <description>摘要：使用Go语言原生包实现Http Server。&#xA;启动一个Http Server 使用Go语言原生的net/http库可以很简单实现一个http server。&#xA;log.Println(&amp;quot;start server&amp;quot;) if err := http.ListenAndServe(&amp;quot;:8080&amp;quot;, nil); err != nil { log.Println(&amp;quot;start server on 8080&amp;quot;) } log.Fatal(&amp;quot;start server failed.&amp;quot;) 没错，只要这么几行代码，就开启了一个http server，监听8080端口。&#xA;接收Http请求 http.HandleFunc 开启了Http server后，无法处理Http请求这个就是个空的Server，下面给它加上处理Http Request的能力。&#xA;func init() { log.Println(&amp;quot;start server&amp;quot;) http.HandleFunc(&amp;quot;/hello_world&amp;quot;, HelloWorld) if err := http.ListenAndServe(&amp;quot;:8080&amp;quot;, nil); err != nil { log.Println(&amp;quot;start server on 8080&amp;quot;) } log.Fatal(&amp;quot;start server failed.&amp;quot;) } func HelloWorld(w http.ResponseWriter, r *http.Request) { _, err := w.Write([]byte(&amp;quot;hello world&amp;quot;)) if err !</description>
    </item>
    <item>
      <title>Go语言反射</title>
      <link>http://localhost:1313/post/2021/06/17/go%E8%AF%AD%E8%A8%80%E5%8F%8D%E5%B0%84/</link>
      <pubDate>Thu, 17 Jun 2021 10:18:23 +0000</pubDate>
      <guid>http://localhost:1313/post/2021/06/17/go%E8%AF%AD%E8%A8%80%E5%8F%8D%E5%B0%84/</guid>
      <description>摘要：理解Go语言的反射机制，反射是指在程序运行期对程序本身进行访问和修改的能力。&#xA;反射基础信息 func reflectDemo() { str := &amp;quot;reflect&amp;quot; fmt.Println(reflect.ValueOf(str)) fmt.Println(reflect.TypeOf(str)) } // 结果 // reflect // string reflect.ValueOf()获取数据运行时的值。 reflect.TypeOf()获取数据类型信息。&#xA;// Type values are comparable, such as with the == operator, // so they can be used as map keys. // Two Type values are equal if they represent identical types. type Type interface { // To compare two Values, compare the results of the Interface method. // Using == on two Values does not compare the underlying values // they represent.</description>
    </item>
    <item>
      <title>Go语言defer、panic、recover</title>
      <link>http://localhost:1313/post/2021/06/15/go%E8%AF%AD%E8%A8%80deferpanicrecover/</link>
      <pubDate>Tue, 15 Jun 2021 10:18:23 +0000</pubDate>
      <guid>http://localhost:1313/post/2021/06/15/go%E8%AF%AD%E8%A8%80deferpanicrecover/</guid>
      <description>摘要：理解Go语言defer、panic、recover。&#xA;defer Go 语言的 defer 会在当前函数返回前执行传入的函数，它会经常被用于关闭文件描述符、关闭数据库连接以及解锁资源，总结一句话就是完成函数执行完的收尾工作。&#xA;func DeferDemo() { defer fmt.Println(&amp;quot;this is defer println&amp;quot;) fmt.Println(&amp;quot;this is println&amp;quot;) } // 输出 // this is println // this is defer println 运行以上代码每次都是第二个println先输出，然后才是defer关键字修饰的println输出。&#xA;如果有多个defer，输出顺序又会如何？&#xA;func MultiDeferDemo() { for i := 0; i &amp;lt; 5; i++ { defer fmt.Println(&amp;quot; defer &amp;quot;, i) } } // 输出 // defer 4 // defer 3 // defer 2 // defer 1 // defer 0 每次最先输出的都是循环的最后一个println，可以得出：多个defer，运行顺序遵循LIFO规则。&#xA;defer的值传递问题。&#xA;基于defer的机制，可以用来统计函数的执行耗时。</description>
    </item>
    <item>
      <title>Go语言包管理</title>
      <link>http://localhost:1313/post/2021/06/10/go%E8%AF%AD%E8%A8%80%E5%8C%85%E7%AE%A1%E7%90%86/</link>
      <pubDate>Thu, 10 Jun 2021 10:18:23 +0000</pubDate>
      <guid>http://localhost:1313/post/2021/06/10/go%E8%AF%AD%E8%A8%80%E5%8C%85%E7%AE%A1%E7%90%86/</guid>
      <description>摘要：Go语言包管理。&#xA;包使用规范 包的习惯用法：&#xA;包名一般是小写的，使用一个简短且有意义的名称。 包名一般要和所在的目录同名，也可以不同，包名中不能包含- 等特殊符号。 包一般使用域名作为目录名称，这样能保证包名的唯一性，比如 GitHub 项目的包一般会放到GOPATH/src/github.com/userName/projectName 目录下。 包名为 main 的包为应用程序的入口包，编译不包含 main 包的源码文件时不会得到可执行文件。 一个文件夹下的所有源码文件只能属于同一个包，同样属于同一个包的源码文件不能放在多个文件夹下。 Go 语言中，所有的定义，比如函数、变量、结构体等，如果首字母是大写，那么就可以被其他包使用；同一包下，不存在引用问题。&#xA;基于包的封装 在Go语言中封装就是把抽象出来的字段和对字段的操作封装在一起，数据被保护在内部，程序的其它包只能通过被授权的方法，才能对字段进行操作。&#xA;封装的好处： 隐藏实现细节； 可以对数据进行验证，保证数据安全合理。&#xA;封装的实现步骤：&#xA;将结构体、字段的首字母小写； 给结构体所在的包提供一个工厂模式的函数，首字母大写，类似一个构造函数； 提供一个首字母大写的 Set 方法（类似其它语言的 public），用于对属性判断并赋值； 提供一个首字母大写的 Get 方法（类似其它语言的 public），用于获取属性的值。 包的初始化 每个包都允许有一个 init 函数，当这个包被导入时，会执行该包的这个 init 函数，做一些初始化任务。 对于 init 函数的执行有两点需要注意:&#xA;init 函数优先于 main 函数执行 在一个包引用链中，包的初始化是深度优先的。比如，有这样一个包引用关系：main→A→B→C，那么初始化顺序为 C.init→B.init→A.init→main 封装引用实例 建立如下工程结构，在main包中需要访问model包中的内容。&#xA;project |---src |---main -main.go |---model -student.go student.go&#xA;type student struct { Name string idCardNum string // 私有，外部包不可访问 Age int8 } func NewStudent(stuName string, age int8) *student { return &amp;amp;student{ Name: stuName, Age: age, } } // 定义结构体方法 func (stu *student) SetIdCardNum(idCN string) { stu.</description>
    </item>
    <item>
      <title>Go语言channel</title>
      <link>http://localhost:1313/post/2021/06/09/go%E8%AF%AD%E8%A8%80channel/</link>
      <pubDate>Wed, 09 Jun 2021 21:18:23 +0000</pubDate>
      <guid>http://localhost:1313/post/2021/06/09/go%E8%AF%AD%E8%A8%80channel/</guid>
      <description>摘要：Go语言中，协程之间通过channel相互通信，可以从一个Go协程将值发送到通道，然后在别的协程中接收。&#xA;channel 定义 定义channel的语法为：make(chan val-type)，val-type就是需要传递值的类型。 chan1 &amp;lt;- val 表示将val发送到channel chann1中， r := &amp;lt;- chann1表示从chann1中读取消息。&#xA;func Ping(c *chan string, s string) { *c &amp;lt;- s } func Pong(c *chan string) string { return &amp;lt;-*c } // main func main() { c := make(chan string) go Ping(&amp;amp;c, &amp;quot;ping&amp;quot;) go func() { pong := Pong(&amp;amp;c) fmt.Println(pong) }() time.Sleep(time.Second * 2) } // 结果 // ping 需要注意的是，向通道中发送消息和从通道中接收消息，都是阻塞的，如果发送和接收不是成对出现，就会发生错误。 将上文中代码改成这样：&#xA;c := make(chan string) Ping(&amp;amp;c, &amp;quot;ping&amp;quot;) //go func() { // pong := Pong(&amp;amp;c) // fmt.</description>
    </item>
    <item>
      <title>Go语言接口</title>
      <link>http://localhost:1313/post/2021/06/05/go%E8%AF%AD%E8%A8%80%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Sat, 05 Jun 2021 21:18:23 +0000</pubDate>
      <guid>http://localhost:1313/post/2021/06/05/go%E8%AF%AD%E8%A8%80%E6%8E%A5%E5%8F%A3/</guid>
      <description>摘要：Go支持接口，接口是方法特征的命名集合。&#xA;go语言接口 go语言中有接口的概念，接口是方法特征的命名集合。它把所有的具有共性的方法定义在一起，任何其他类型只要实现了这些方法就是实现了这个接口。&#xA;注意，实现了这些方法就算实现了这个接口。&#xA;定义接口 // 定义geometry接口 type geometry interface { area() float64 peri() float64 } 接口的定义也比较简单。定义和实现规则如下：&#xA;/* 定义接口 */ type interface_name interface { method_name1 [return_type] method_name2 [return_type] method_name3 [return_type] ... method_namen [return_type] } /* 定义结构体 */ type struct_name struct { /* variables */ } /* 实现接口方法 */ func (struct_name_variable struct_name) method_name1() [return_type] { /* 方法实现 */ } ... func (struct_name_variable struct_name) method_namen() [return_type] { /* 方法实现*/ } 实现接口 Go语言中接口的实现都是隐式的，默认实现了接口的所有方法就隐式地实现了接口。</description>
    </item>
    <item>
      <title>Go语言指针</title>
      <link>http://localhost:1313/post/2021/06/05/go%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/</link>
      <pubDate>Sat, 05 Jun 2021 21:18:23 +0000</pubDate>
      <guid>http://localhost:1313/post/2021/06/05/go%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/</guid>
      <description>摘要：Go支持指针，允许在程序中通过引用传递值或者数据结构。&#xA;go语言中的指针和C语言中的指针类似，但比C语言中的指针更简单。&#xA;// Go语言取地址符号是&amp;amp;，放到变量前会返回对应变量的内存地址 var i1 int = 1 var j = i1 fmt.Println(&amp;amp;i1) fmt.Println(&amp;amp;j) // 定义指针变量 var var_name *var_type s := &amp;quot;sss&amp;quot; p := 2181 var ip *string = &amp;amp;s var port *int = &amp;amp;p fmt.Println(*ip) fmt.Println(*port) 变量、指针和地址三者的关系是，每个变量都拥有地址，指针的值就是地址。&#xA;通过&amp;amp; 获取对应变量的内存地址。 通过* 获取指针的值，也就是指针取值。取地址操作符 &amp;amp; 和取值操作符 * 是一对互补操作符，&amp;amp; 取出地址，* 根据地址取出地址指向的值。&#xA;变量、指针地址、指针变量、取地址、取值的相互关系和特性如下：&#xA;对变量进行取地址操作使用&amp;amp;操作符，可以获得这个变量的指针变量。 指针变量的值是指针地址。 对指针变量进行取值操作使用*操作符，可以获得指针变量指向的原变量的值。 通过New()创建指针 Go语言还提供了另外一种方法来创建指针变量，格式如下： new(type) 这个type可以为int。&#xA;// create ptr by new() func createPtr() { str := new(string) *str = &amp;quot;ssss&amp;quot; fmt.</description>
    </item>
    <item>
      <title>Go语言goroutine</title>
      <link>http://localhost:1313/post/2021/06/03/go%E8%AF%AD%E8%A8%80goroutine/</link>
      <pubDate>Thu, 03 Jun 2021 21:18:23 +0000</pubDate>
      <guid>http://localhost:1313/post/2021/06/03/go%E8%AF%AD%E8%A8%80goroutine/</guid>
      <description>摘要：Go语言goroutine&#xA;goroutine协程 Go 协程 在执行上来说是轻量级的线程。go语言层面并不支持多进程或多线程，但是协程更好用，协程被称为用户态线程，不存在CPU上下文切换问题，效率非常高。&#xA;go语言中启动一个协程非常简单，只需要在执行函数前加上go关键字，就可以启用goroutine。&#xA;func main() { // 使用匿名函数启用goroutine go func() { fmt.Println(&amp;quot;goroutine&amp;quot;) }() // 调用函数启用goroutine go func1() } func func1() { fmt.Println(&amp;quot;f1() was called.&amp;quot;) } 没错就是这么简单，在go语言中，goroutine会被放到运行队列runtime.runqput中，然后由调度器调度。并非是每一个协程都会有一个对应的线程去执行，协程比线程的粒度更细。&#xA;但是上述代码并不会有输出结果，因为还没等func1()函数执行完成，main()就已经执行完成了。所以在main()函数执行完成之前sleep一下就可以看到func1()的执行结果。&#xA;time.Sleep(time.Second * 1) WaitGroup sleep肯定是不靠谱的，go语言中可以等待协程执行完成后再回到主线程。&#xA;// 定义全局变量 var WG = sync.WaitGroup{} func main() { WG.Add(1) go func1() WG.Wait() } func func1() { fmt.Println(&amp;quot;f1() was called.&amp;quot;) WG.Done() } 在调用func1()之前，调用全局变量WG.Add()方法，然后启用goroutine调用func1()，然后调用WG.Wait()函数进行等待，fun1()调用结束后，调用WG.Done()。 通过试验可以发现：Add()方法中的数值与Done()方法的数量应该保持一致。当Add(2)时，Done()方法应该执行两次。直到 WaitGroup 计数器恢复为 0； 即所有协程的工作都已经完成。 看源码可以发现，Done()与Add()实际上是一个函数。&#xA;// Done decrements the WaitGroup counter by one.</description>
    </item>
    <item>
      <title>Go语言基本数据结构</title>
      <link>http://localhost:1313/post/2021/06/01/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Tue, 01 Jun 2021 21:18:23 +0000</pubDate>
      <guid>http://localhost:1313/post/2021/06/01/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>摘要：Go语言基本数据结构&#xA;数组 strings := [3]string{&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;2&amp;quot;} intArray := [8]int{1, 2, 3, 4, 5, 5, 5, 55} 定义两个数组,fmt.Println(len(strings)) 可以使用len()函数得到数组的长度，strings[1]可以获取指定数组下标的元素。&#xA;所以通过以下方式可以遍历数组：&#xA;for i := 0; i &amp;lt; len(strings); i++ { fmt.Println(strings[i]) } 下文提供了更加优雅的方式。&#xA;slice Go数组的长度不可变，Go提供了一种内置类型切片:slice，与数组相比，切片的长度不是固定的，可以动态扩容、添加元素。&#xA;slice1 := make([]string, 2) fmt.Println(slice1) slice1[0] = &amp;quot;22&amp;quot; slice1[1] = &amp;quot;222&amp;quot; fmt.Println(slice1) slice1 = append(slice1, &amp;quot;33&amp;quot;, &amp;quot;44&amp;quot;, &amp;quot;55&amp;quot;) fmt.Println(slice1) fmt.Println(len(slice1)) // 裁剪，从index 2 到index 4 sliceSub := slice1[2:4] fmt.Println(sliceSub) // 裁剪，从index 2 到最后 sliceSub2 := slice1[2:] fmt.</description>
    </item>
    <item>
      <title>Go语言变量</title>
      <link>http://localhost:1313/post/2021/05/31/go%E8%AF%AD%E8%A8%80%E5%8F%98%E9%87%8F/</link>
      <pubDate>Mon, 31 May 2021 21:18:23 +0000</pubDate>
      <guid>http://localhost:1313/post/2021/05/31/go%E8%AF%AD%E8%A8%80%E5%8F%98%E9%87%8F/</guid>
      <description>摘要：Go语言变量&#xA;Go语言中的变量定义相对严格，当定义一个局部变量为使用时，会编译报错，在go语言中，无需要多余的代码。但全局变量除外，定义全局变量允许暂不使用。&#xA;全局变量 全局变量可以被全局访问&#xA;定义全局变量：&#xA;// global variable var x, y int var ( a int b bool ) 基本常量 常量一经被定义后无法被重新赋值，常量可以定义为全局的，也可以定义为局部的。&#xA;定义常量：&#xA;// 这是一个常量 const CONST1 = 111 iota常量 iota，特殊常量，可以认为是一个可以被编译器修改的常量。 iota 在 const关键字出现时将被重置为 0(const 内部的第一行之前)，const 中每新增一行常量声明将使 iota 计数一次(iota 可理解为 const 语句块中的行索引)。&#xA;const ( a = iota b = iota c = iota ) // 以上写法可以简写为 const ( d = iota e f ) fmt.Println(a, b, c) fmt.Println(d, e, f) // 输出结果： // 0 1 2 // 0 1 2 iota常量可以恢复计数</description>
    </item>
  </channel>
</rss>
