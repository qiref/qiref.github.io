<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spark on 大道至简</title>
    <link>https://qiref.github.io/tags/spark/</link>
    <description>Recent content in Spark on 大道至简</description>
    <generator>Hugo</generator>
    <language>cn-zh</language>
    <lastBuildDate>Sat, 27 Jul 2019 00:18:23 +0000</lastBuildDate>
    <atom:link href="https://qiref.github.io/tags/spark/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>spark学习笔记-RDD基础算子</title>
      <link>https://qiref.github.io/post/2019/07/27/spark%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-rdd%E5%9F%BA%E7%A1%80%E7%AE%97%E5%AD%90/</link>
      <pubDate>Sat, 27 Jul 2019 00:18:23 +0000</pubDate>
      <guid>https://qiref.github.io/post/2019/07/27/spark%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-rdd%E5%9F%BA%E7%A1%80%E7%AE%97%E5%AD%90/</guid>
      <description>&lt;p&gt;摘要：学习spark过程中的笔记，记录spark中的基础算子，以及RDD的基本概念。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;spark-transform-operation&#34;&gt;spark transform operation&lt;/h2&gt;&#xA;&lt;p&gt;源码地址：&lt;a href=&#34;https://github.com/YaoQi17/sparkLearning/tree/master/sparkRDD&#34;&gt;https://github.com/YaoQi17/sparkLearning/tree/master/sparkRDD&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;&#xA;&lt;p&gt;RDD(Resilient Distributed Dataset) 弹性分布式数据集，是一组分布式的数据集合，里面的元素可并行计算，可分区；&#xA;RDD允许用户在执行多个查询时显示地将工作集缓存在内存中，例如persist()；&lt;/p&gt;&#xA;&lt;h3 id=&#34;创建方式&#34;&gt;创建方式&lt;/h3&gt;&#xA;&lt;p&gt;创建RDD的两种方式：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;读取外界文件&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;外界文件不局限于系统文件，包括HDFS、HBase等&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;sparkSession.sparkContext.textFile(&amp;quot;sparkRDD/src/main/resources/data.txt&amp;quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过并行化的方式创建&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val sparkSession = getDefaultSparkSession&#xA;val dataArray = Array(1, 2, 3, 4, 5, 6)&#xA;// 创建一个RDD&#xA;val rdd = sparkSession.sparkContext.parallelize(dataArray)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;通过并行化的方式创建还可以指定分区的数量&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;/** Distribute a local Scala collection to form an RDD.&#xA;   *&#xA;   * @note Parallelize acts lazily. If `seq` is a mutable collection and is altered after the call&#xA;   * to parallelize and before the first action on the RDD, the resultant RDD will reflect the&#xA;   * modified collection. Pass a copy of the argument to avoid this.&#xA;   * @note avoid using `parallelize(Seq())` to create an empty `RDD`. Consider `emptyRDD` for an&#xA;   * RDD with no partitions, or `parallelize(Seq[T]())` for an RDD of `T` with empty partitions.&#xA;   * @param seq Scala collection to distribute&#xA;   * @param numSlices number of partitions to divide the collection into&#xA;   * @return RDD representing distributed collection&#xA;   */&#xA;  def parallelize[T: ClassTag](&#xA;      seq: Seq[T],&#xA;      numSlices: Int = defaultParallelism): RDD[T] = withScope {&#xA;    assertNotStopped()&#xA;    new ParallelCollectionRDD[T](this, seq, numSlices, Map[Int, Seq[String]]())&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;rdd编程&#34;&gt;RDD编程&lt;/h3&gt;&#xA;&lt;p&gt;RDD中包含两种类型的算子：Transformation和Action；&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
