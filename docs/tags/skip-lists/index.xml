<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Skip Lists on 大道至简</title>
    <link>https://qiref.github.io/tags/skip-lists/</link>
    <description>Recent content in Skip Lists on 大道至简</description>
    <generator>Hugo</generator>
    <language>cn-zh</language>
    <lastBuildDate>Sun, 01 Oct 2023 22:05:38 +0800</lastBuildDate>
    <atom:link href="https://qiref.github.io/tags/skip-lists/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Skip Lists 阅读笔记</title>
      <link>https://qiref.github.io/post/2023/10/01/skip-lists-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 01 Oct 2023 22:05:38 +0800</pubDate>
      <guid>https://qiref.github.io/post/2023/10/01/skip-lists-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;h2 id=&#34;算法介绍&#34;&gt;算法介绍&lt;/h2&gt;&#xA;&lt;p&gt;《Skip Lists: A Probabilistic Alternative to Balanced Trees》 论文标题翻译就是 跳表: 平衡树的概率性替代方案; 跳表是一种可以用来代替平衡树的数据结构。跳表使用概率平衡而不是严格强制的平衡，因此跳跃列表中的插入和删除算法比平衡树的等效算法要简单得多并且速度明显更快。&lt;/p&gt;&#xA;&lt;p&gt;从论文的标题和介绍, 基本上就能知道跳表是一种怎么样的数据结构, 为了解决平衡树实现的复杂性, 提供一种概率性平衡的数据结构,作为平衡树的平替数据结构, 查询和插入时间复杂度是 &lt;code&gt;O(log n)&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;算法流程&#34;&gt;算法流程&lt;/h2&gt;&#xA;&lt;h3 id=&#34;基本原理&#34;&gt;基本原理&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://qiref.github.io/assets/img/skiplist-1.svg&#34; alt=&#34;skiplist-1&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;节点结构：跳表由多个层级组成，每个层级都是一个有序链表。每个节点包含一个值和多个指向下一层级节点的指针。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;层级索引：跳表的最底层是一个普通的有序链表，每个节点都连接到下一个节点。而在更高的层级，节点以一定的概率连接到更远的节点，形成了一种“跳跃”的效果。这些连接被称为“跳跃指针”，它们允许我们在查找时可以快速地跳过一些节点。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;查找操作：从跳表的顶层开始，我们沿着每个层级向右移动，直到找到目标值或找到一个大于目标值的节点。然后我们进入下一层级继续查找，直到最底层。这种方式可以在平均情况下实现快速的查找，时间复杂度为 O(log n)。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;插入和删除操作：在插入新节点时，我们首先执行查找操作，找到合适的插入位置。然后我们在每个层级上插入新节点，并根据一定的概率决定是否要为该节点添加跳跃指针。删除操作类似，我们首先找到要删除的节点，然后将其从每个层级中移除。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;查询&#34;&gt;查询&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;level&lt;/code&gt; 表示跳表的层级, 而 &lt;code&gt;forward[i]&lt;/code&gt; 是每一个层级的链表.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Search(list, searchKey)&#xA;    x := list→header&#xA;    // 从跳表的顶层开始,遍历到第一层&#xA;    for i := list→level downto 1 do&#xA;        while x→forward[i]→key &amp;lt; searchKey do&#xA;            x := x→forward[i]&#xA;    // x→key &amp;lt; searchKey ≤ x→forward[1]→key&#xA;    // 最终的结果从跳表最底层获取&#xA;    x := x→forward[1]&#xA;    if x→key = searchKey then &#xA;        return x→value&#xA;    else &#xA;        return failure&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;写入&#34;&gt;写入&lt;/h3&gt;&#xA;&lt;p&gt;由跳表的定义得出, 跳表的上一层级相当于下一层级的索引, 如果需要构建多级的索引, 首先需要解决: &lt;em&gt;当前node是否应该索引到上一层级?&lt;/em&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
