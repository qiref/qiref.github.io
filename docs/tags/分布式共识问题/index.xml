<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>分布式共识问题 on 大道至简</title>
    <link>https://qiref.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%B1%E8%AF%86%E9%97%AE%E9%A2%98/</link>
    <description>Recent content in 分布式共识问题 on 大道至简</description>
    <generator>Hugo</generator>
    <language>cn-zh</language>
    <lastBuildDate>Wed, 01 Jan 2025 16:29:06 +0800</lastBuildDate>
    <atom:link href="https://qiref.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%B1%E8%AF%86%E9%97%AE%E9%A2%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Paxos推导过程</title>
      <link>https://qiref.github.io/post/2025/01/01/paxos%E6%8E%A8%E5%AF%BC%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Wed, 01 Jan 2025 16:29:06 +0800</pubDate>
      <guid>https://qiref.github.io/post/2025/01/01/paxos%E6%8E%A8%E5%AF%BC%E8%BF%87%E7%A8%8B/</guid>
      <description>&lt;p&gt;paxos 是一个分布式共识算法, 就是用来解决分布式系统中, 多副本数据如何保证读写一致性的问题.&lt;/p&gt;&#xA;&lt;h3 id=&#34;不完美的副本数据同步机制&#34;&gt;不完美的副本数据同步机制&lt;/h3&gt;&#xA;&lt;p&gt;假设我们有个分布式存储系统, 数据在写入时, 需要把数据写入到其他节点: 副本数据从一个节点复制到其他节点, 有几种复制办法:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;同步复制&lt;/li&gt;&#xA;&lt;li&gt;异步复制&lt;/li&gt;&#xA;&lt;li&gt;半同步复制&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;同步复制&#34;&gt;同步复制&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;# node1, node2, node3 &#xA;&#xA;a=x --&amp;gt; node1 --&amp;gt; node2&#xA;              ------&amp;gt; node3&#xA;                           --&amp;gt; done&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;数据在一次写入时, 需要同时写入 node1, node2, node3 三个节点, 写入完成才算是一次写入成功;&lt;/p&gt;&#xA;&lt;p&gt;同步复制有什么问题:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;性能低下; 写入性能会受制于节点数量;&lt;/li&gt;&#xA;&lt;li&gt;没有容错, 任何一个节点写入失败, 则系统不可用;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;异步复制&#34;&gt;异步复制&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;a=x --&amp;gt; node1 &#xA;             --&amp;gt; done&#xA;             async( node1  --&amp;gt; node2 ; node1  --&amp;gt; node3 ) &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;数据在一次写入时, 只要写入一个节点, 则认定写入成功, node1 写入 node2; node1 写入 node3 是异步复制, 不影响整体写入结果;&lt;/p&gt;&#xA;&lt;p&gt;异步复制有什么问题:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;数据可能存在不一致, 当 async( node1  &amp;ndash;&amp;gt; node2) 写入失败时, node2 和 node1 上的数据就不一致;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;半同步复制&#34;&gt;半同步复制&lt;/h4&gt;&#xA;&lt;p&gt;数据在一次写入时, 数据必须写入一定量的副本(不是全部), 这样多副本则提供了较高的可靠性;&lt;/p&gt;</description>
    </item>
    <item>
      <title>两阶段提交和三阶段提交</title>
      <link>https://qiref.github.io/post/2024/07/25/%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4%E5%92%8C%E4%B8%89%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/</link>
      <pubDate>Thu, 25 Jul 2024 20:57:06 +0800</pubDate>
      <guid>https://qiref.github.io/post/2024/07/25/%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4%E5%92%8C%E4%B8%89%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/</guid>
      <description>&lt;h2 id=&#34;分布式共识问题&#34;&gt;分布式共识问题&lt;/h2&gt;&#xA;&lt;p&gt;分布式共识问题是指在分布式系统中，多个节点或参与者需要就某个共同的结果达成一致意见的问题。例如主从同步问题, 简单的主从同步可以借助两阶段提交和三阶段提交来解决,确保所有节点上的事务操作能够保持一致性，即要么全部提交，要么全部回滚。&lt;/p&gt;&#xA;&lt;h2 id=&#34;两阶段提交&#34;&gt;两阶段提交&lt;/h2&gt;&#xA;&lt;p&gt;在主从同步的场景中, backup 需要从 master 同步数据, 从数据写入的场景来说, 假定主从节点是同步复制, 实际上就是一次分布式事务, backup 和 master 的一次写入要么都成功, 要么都失败, 才能保证主从节点的数据一致性;&lt;/p&gt;&#xA;&lt;p&gt;借助两阶段提交, 需要引入一个协调者: Coordinator, 如下:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://qiref.github.io/assets/img/2phase-commit-1.svg&#34; alt=&#34;2phase-commit-1&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;将提交过程分为两个阶段: PreCommit、commit;&lt;/p&gt;&#xA;&lt;p&gt;在 PreCommit 阶段, 执行 WAL 流程, 把事务日志提前写入, 然后 Coordinator 在收到参与者的 PreCommit ack 之后, 开启第二阶段 commit, commit 成功之后, 数据才算是真正的写入. 当 PreCommit 失败时, Coordinator 会发起事务回滚, 所有参与者会基于 WAL 的事务日志, 回滚此次事务;&lt;/p&gt;&#xA;&lt;p&gt;当 Coordinator 和 Participant 网络异常时, 如果是在 PreCommit 阶段, 那事务都不会提交, 相当于一次写入就失败了;  如果在 commit 阶段网络异常, Coordinator 会重试执行, 直到 Participant 恢复, 事务重新提交或者回滚. 但在此期间, 客户端的写入都会被拒绝, 此时分布式系统处于不可用状态(相当于保证了数据一致性, 牺牲了可用性)&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
