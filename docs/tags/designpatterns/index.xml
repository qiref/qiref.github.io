<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DesignPatterns on 大道至简</title>
    <link>https://qiref.github.io/tags/designpatterns/</link>
    <description>Recent content in DesignPatterns on 大道至简</description>
    <generator>Hugo</generator>
    <language>cn-zh</language>
    <lastBuildDate>Thu, 11 Jul 2019 00:18:23 +0000</lastBuildDate>
    <atom:link href="https://qiref.github.io/tags/designpatterns/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>工厂模式</title>
      <link>https://qiref.github.io/post/2019/07/11/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 11 Jul 2019 00:18:23 +0000</pubDate>
      <guid>https://qiref.github.io/post/2019/07/11/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;摘要：详细结束工厂模式（Factory Pattern）的使用，以及在Java中的实现方式。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;&#xA;&lt;p&gt;工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。工厂模式主要是解决创建对象的问题，典型的应用就是在spring中的IOC，反转控制，反转控制就是把创建对象的权限交给框架，所以spring就是一个生产对象的工厂。&lt;/p&gt;&#xA;&lt;h2 id=&#34;思路&#34;&gt;思路&lt;/h2&gt;&#xA;&lt;p&gt;工厂模式的思路就是设计一个产生对象的机制，让生产对象的过程交给第三方，在工厂模式中，不会对客户端暴露创建逻辑，并且使用通用接口接收新创建的对象。&lt;/p&gt;&#xA;&lt;h3 id=&#34;实现过程&#34;&gt;实现过程&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;新建抽象的接口&lt;/li&gt;&#xA;&lt;li&gt;新建具体的实体类，实现抽象的接口&lt;/li&gt;&#xA;&lt;li&gt;创建实例化对象的工厂&lt;/li&gt;&#xA;&lt;li&gt;在客户端中通过工厂创建具体的实体对象，对象可以用抽象接口接收。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;这种方式是最简单的实现方式：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 创建接口&#xA;public interface Shape {&#xA;    void draw();&#xA;}&#xA;&#xA;// 创建实体类Circle&#xA;public class Circle implements Shape {&#xA;    @Override&#xA;    public void draw() {&#xA;        System.out.println(&amp;quot;drawing a circle&amp;quot;);&#xA;    }&#xA;}&#xA;&#xA;// 创建实体类Rectangle&#xA;public class Rectangle implements Shape {&#xA;    @Override&#xA;    public void draw() {&#xA;        System.out.println(&amp;quot;drawing a Rectangle&amp;quot;);&#xA;    }&#xA;}&#xA;&#xA;// 创建实体类Square &#xA;public class Square implements Shape {&#xA;    @Override&#xA;    public void draw() {&#xA;        System.out.println(&amp;quot;drawing a square&amp;quot;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;然后创建工厂类，生成对应的实体类。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
