<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mutex on 大道至简</title>
    <link>https://qiref.github.io/tags/mutex/</link>
    <description>Recent content in Mutex on 大道至简</description>
    <generator>Hugo</generator>
    <language>cn-zh</language>
    <lastBuildDate>Wed, 15 May 2024 15:53:46 +0800</lastBuildDate>
    <atom:link href="https://qiref.github.io/tags/mutex/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>关于锁的思考和总结(一)</title>
      <link>https://qiref.github.io/post/2024/05/15/%E5%85%B3%E4%BA%8E%E9%94%81%E7%9A%84%E6%80%9D%E8%80%83%E5%92%8C%E6%80%BB%E7%BB%93%E4%B8%80/</link>
      <pubDate>Wed, 15 May 2024 15:53:46 +0800</pubDate>
      <guid>https://qiref.github.io/post/2024/05/15/%E5%85%B3%E4%BA%8E%E9%94%81%E7%9A%84%E6%80%9D%E8%80%83%E5%92%8C%E6%80%BB%E7%BB%93%E4%B8%80/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func add (a *int) *int { &#xA;  *a++ // 线程不安全&#xA;  return a&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;这是一段很典型的线程不安全的代码示例, 在并发场景下, a 的结果是不确定的, 大概率会小于 1000, 原因是 &lt;code&gt;a++&lt;/code&gt; 并非原子操作, 会存在同时有两个协程读取到 a 的值是相同的情况, 执行 &lt;code&gt;a++&lt;/code&gt;之后再重新回写时, a的值也是相同的, 想要变为线程安全, 就需要在操作临界资源之前加锁;&lt;/p&gt;&#xA;&lt;h2 id=&#34;mutex&#34;&gt;Mutex&lt;/h2&gt;&#xA;&lt;p&gt;在操作共享资源之前加锁, 然后操作完临界资源之后释放锁, 保证同时只有一个协程操作临界资源;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var mu sync.Mutex&#xA;func addSafe(a *int) *int {&#xA;  mu.Lock() // 加锁&#xA;  defer mu.Unlock() // 释放锁&#xA;  *a++&#xA;  return a&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;锁在多线程或多进程环境中实现资源的互斥访问。当一个线程或进程想要访问某个共享资源（如数据结构、文件等）时，它必须首先尝试获取该资源对应的锁。如果锁未被其他线程或进程占用，那么请求的线程或进程将获得锁并继续执行；否则，它将等待，直到锁被释放。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// If the lock is already in use, the calling goroutine&#xA;// blocks until the mutex is available.&#xA;func (m *Mutex) Lock() {&#xA;  // Fast path: grab unlocked mutex.&#xA;  if atomic.CompareAndSwapInt32(&amp;amp;m.state, 0, mutexLocked) {&#xA;    if race.Enabled {&#xA;      race.Acquire(unsafe.Pointer(m))&#xA;    }&#xA;    return&#xA;  }&#xA;  // Slow path (outlined so that the fast path can be inlined)&#xA;  m.lockSlow()&#xA;}&#xA;&#xA;type Mutex struct {&#xA;  state int32 // state 表示当前互斥锁的状态&#xA;  sema  uint32 // sema 是用于控制锁状态的信号量&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;在 &lt;code&gt;golang&lt;/code&gt; 的实现中, 如果通过 &lt;code&gt;CompareAndSwapInt32&lt;/code&gt; 也就是 &lt;code&gt;CAS&lt;/code&gt; 能获取到锁, 表明协程已经能拿到锁了, 此时直接返回;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
